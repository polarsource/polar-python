"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .polar_enums_paymentprocessor import PolarEnumsPaymentProcessor
from .productprice import ProductPrice, ProductPriceTypedDict
from datetime import datetime
from polar_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from polar_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Dict
from typing_extensions import Annotated, TypedDict


class CheckoutLinkTypedDict(TypedDict):
    r"""Checkout link data."""

    created_at: datetime
    r"""Creation timestamp of the object."""
    modified_at: Nullable[datetime]
    r"""Last modification timestamp of the object."""
    id: str
    r"""The ID of the object."""
    metadata: Dict[str, str]
    client_secret: str
    r"""Client secret used to access the checkout link."""
    success_url: Nullable[str]
    r"""URL where the customer will be redirected after a successful payment."""
    product_price_id: str
    r"""ID of the product price to checkout."""
    product_price: ProductPriceTypedDict
    url: str
    payment_processor: PolarEnumsPaymentProcessor


class CheckoutLink(BaseModel):
    r"""Checkout link data."""

    created_at: datetime
    r"""Creation timestamp of the object."""

    modified_at: Nullable[datetime]
    r"""Last modification timestamp of the object."""

    id: str
    r"""The ID of the object."""

    metadata: Dict[str, str]

    client_secret: str
    r"""Client secret used to access the checkout link."""

    success_url: Nullable[str]
    r"""URL where the customer will be redirected after a successful payment."""

    product_price_id: str
    r"""ID of the product price to checkout."""

    product_price: ProductPrice

    url: str

    PAYMENT_PROCESSOR: Annotated[
        Annotated[
            PolarEnumsPaymentProcessor,
            AfterValidator(validate_const(PolarEnumsPaymentProcessor.STRIPE)),
        ],
        pydantic.Field(alias="payment_processor"),
    ] = PolarEnumsPaymentProcessor.STRIPE

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["modified_at", "success_url"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
