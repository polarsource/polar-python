"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .eventnamessortproperty import EventNamesSortProperty
from .listresource_eventname_ import (
    ListResourceEventName,
    ListResourceEventNameTypedDict,
)
from polar_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from polar_sdk.utils import FieldMetadata, QueryParamMetadata
from pydantic import model_serializer
from typing import Callable, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


EventsListNamesQueryParamOrganizationIDFilterTypedDict = TypeAliasType(
    "EventsListNamesQueryParamOrganizationIDFilterTypedDict", Union[str, List[str]]
)
r"""Filter by organization ID."""


EventsListNamesQueryParamOrganizationIDFilter = TypeAliasType(
    "EventsListNamesQueryParamOrganizationIDFilter", Union[str, List[str]]
)
r"""Filter by organization ID."""


EventsListNamesQueryParamCustomerIDFilterTypedDict = TypeAliasType(
    "EventsListNamesQueryParamCustomerIDFilterTypedDict", Union[str, List[str]]
)
r"""Filter by customer ID."""


EventsListNamesQueryParamCustomerIDFilter = TypeAliasType(
    "EventsListNamesQueryParamCustomerIDFilter", Union[str, List[str]]
)
r"""Filter by customer ID."""


QueryParamExternalCustomerIDFilterTypedDict = TypeAliasType(
    "QueryParamExternalCustomerIDFilterTypedDict", Union[str, List[str]]
)
r"""Filter by external customer ID."""


QueryParamExternalCustomerIDFilter = TypeAliasType(
    "QueryParamExternalCustomerIDFilter", Union[str, List[str]]
)
r"""Filter by external customer ID."""


class EventsListNamesRequestTypedDict(TypedDict):
    organization_id: NotRequired[
        Nullable[EventsListNamesQueryParamOrganizationIDFilterTypedDict]
    ]
    r"""Filter by organization ID."""
    customer_id: NotRequired[
        Nullable[EventsListNamesQueryParamCustomerIDFilterTypedDict]
    ]
    r"""Filter by customer ID."""
    external_customer_id: NotRequired[
        Nullable[QueryParamExternalCustomerIDFilterTypedDict]
    ]
    r"""Filter by external customer ID."""
    query: NotRequired[Nullable[str]]
    r"""Query to filter event names."""
    page: NotRequired[int]
    r"""Page number, defaults to 1."""
    limit: NotRequired[int]
    r"""Size of a page, defaults to 10. Maximum is 100."""
    sorting: NotRequired[Nullable[List[EventNamesSortProperty]]]
    r"""Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."""


class EventsListNamesRequest(BaseModel):
    organization_id: Annotated[
        OptionalNullable[EventsListNamesQueryParamOrganizationIDFilter],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by organization ID."""

    customer_id: Annotated[
        OptionalNullable[EventsListNamesQueryParamCustomerIDFilter],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by customer ID."""

    external_customer_id: Annotated[
        OptionalNullable[QueryParamExternalCustomerIDFilter],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by external customer ID."""

    query: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Query to filter event names."""

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Page number, defaults to 1."""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10
    r"""Size of a page, defaults to 10. Maximum is 100."""

    sorting: Annotated[
        OptionalNullable[List[EventNamesSortProperty]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "organization_id",
            "customer_id",
            "external_customer_id",
            "query",
            "page",
            "limit",
            "sorting",
        ]
        nullable_fields = [
            "organization_id",
            "customer_id",
            "external_customer_id",
            "query",
            "sorting",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class EventsListNamesResponseTypedDict(TypedDict):
    result: ListResourceEventNameTypedDict


class EventsListNamesResponse(BaseModel):
    next: Callable[[], Optional[EventsListNamesResponse]]

    result: ListResourceEventName
