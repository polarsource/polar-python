"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .subscription_input import SubscriptionInput, SubscriptionInputTypedDict
from enum import Enum
from polar_sdk.types import BaseModel
from polar_sdk.utils import validate_const
import pydantic
from pydantic.functional_validators import AfterValidator
from typing_extensions import Annotated, TypedDict


class WebhookSubscriptionUpdatedPayloadType(str, Enum):
    SUBSCRIPTION_UPDATED = "subscription.updated"


class WebhookSubscriptionUpdatedPayloadTypedDict(TypedDict):
    r"""Sent when a new subscription is updated. This event fires if the subscription is cancelled, both immediately and if the subscription is cancelled at the end of the current period.

    **Discord & Slack support:** On cancellation
    """

    data: SubscriptionInputTypedDict
    type: WebhookSubscriptionUpdatedPayloadType


class WebhookSubscriptionUpdatedPayload(BaseModel):
    r"""Sent when a new subscription is updated. This event fires if the subscription is cancelled, both immediately and if the subscription is cancelled at the end of the current period.

    **Discord & Slack support:** On cancellation
    """

    data: SubscriptionInput

    TYPE: Annotated[
        Annotated[
            WebhookSubscriptionUpdatedPayloadType,
            AfterValidator(
                validate_const(
                    WebhookSubscriptionUpdatedPayloadType.SUBSCRIPTION_UPDATED
                )
            ),
        ],
        pydantic.Field(alias="type"),
    ] = WebhookSubscriptionUpdatedPayloadType.SUBSCRIPTION_UPDATED
