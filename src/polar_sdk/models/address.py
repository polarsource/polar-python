"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from polar_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class AddressTypedDict(TypedDict):
    country: str
    line1: NotRequired[Nullable[str]]
    line2: NotRequired[Nullable[str]]
    postal_code: NotRequired[Nullable[str]]
    city: NotRequired[Nullable[str]]
    state: NotRequired[Nullable[str]]


class Address(BaseModel):
    country: str

    line1: OptionalNullable[str] = UNSET

    line2: OptionalNullable[str] = UNSET

    postal_code: OptionalNullable[str] = UNSET

    city: OptionalNullable[str] = UNSET

    state: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["line1", "line2", "postal_code", "city", "state"]
        nullable_fields = ["line1", "line2", "postal_code", "city", "state"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
