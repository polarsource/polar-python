"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .articlevisibility import ArticleVisibility
from .bylineprofile import BylineProfile, BylineProfileTypedDict
from .organization_output import OrganizationOutput, OrganizationOutputTypedDict
from datetime import datetime
from polar_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import TypedDict


class ArticleTypedDict(TypedDict):
    id: str
    slug: str
    title: str
    body: str
    byline: BylineProfileTypedDict
    visibility: ArticleVisibility
    user_id: Nullable[str]
    organization_id: str
    organization: OrganizationOutputTypedDict
    published_at: Nullable[datetime]
    paid_subscribers_only: Nullable[bool]
    paid_subscribers_only_ends_at: Nullable[datetime]
    is_preview: bool
    is_pinned: bool
    notify_subscribers: Nullable[bool]
    notifications_sent_at: Nullable[datetime]
    email_sent_to_count: Nullable[int]
    og_image_url: Nullable[str]
    og_description: Nullable[str]


class Article(BaseModel):
    id: str

    slug: str

    title: str

    body: str

    byline: BylineProfile

    visibility: ArticleVisibility

    user_id: Nullable[str]

    organization_id: str

    organization: OrganizationOutput

    published_at: Nullable[datetime]

    paid_subscribers_only: Nullable[bool]

    paid_subscribers_only_ends_at: Nullable[datetime]

    is_preview: bool

    is_pinned: bool

    notify_subscribers: Nullable[bool]

    notifications_sent_at: Nullable[datetime]

    email_sent_to_count: Nullable[int]

    og_image_url: Nullable[str]

    og_description: Nullable[str]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "user_id",
            "published_at",
            "paid_subscribers_only",
            "paid_subscribers_only_ends_at",
            "notify_subscribers",
            "notifications_sent_at",
            "email_sent_to_count",
            "og_image_url",
            "og_description",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
