"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .productpricecustom_output import (
    ProductPriceCustomOutput,
    ProductPriceCustomOutputTypedDict,
)
from .productpricefixed_output import (
    ProductPriceFixedOutput,
    ProductPriceFixedOutputTypedDict,
)
from .productpricefree_output import (
    ProductPriceFreeOutput,
    ProductPriceFreeOutputTypedDict,
)
from .productpricemeteredunit_output import (
    ProductPriceMeteredUnitOutput,
    ProductPriceMeteredUnitOutputTypedDict,
)
from .productpriceseatbased_output import (
    ProductPriceSeatBasedOutput,
    ProductPriceSeatBasedOutputTypedDict,
)
from polar_sdk.utils import get_discriminator
from pydantic import Discriminator, Tag
from typing import Union
from typing_extensions import Annotated, TypeAliasType


ProductPriceOutputTypedDict = TypeAliasType(
    "ProductPriceOutputTypedDict",
    Union[
        ProductPriceFreeOutputTypedDict,
        ProductPriceFixedOutputTypedDict,
        ProductPriceSeatBasedOutputTypedDict,
        ProductPriceCustomOutputTypedDict,
        ProductPriceMeteredUnitOutputTypedDict,
    ],
)


ProductPriceOutput = Annotated[
    Union[
        Annotated[ProductPriceCustomOutput, Tag("custom")],
        Annotated[ProductPriceFixedOutput, Tag("fixed")],
        Annotated[ProductPriceFreeOutput, Tag("free")],
        Annotated[ProductPriceMeteredUnitOutput, Tag("metered_unit")],
        Annotated[ProductPriceSeatBasedOutput, Tag("seat_based")],
    ],
    Discriminator(lambda m: get_discriminator(m, "amount_type", "amount_type")),
]
