"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .organizationdetails import OrganizationDetails, OrganizationDetailsTypedDict
from .organizationfeaturesettings import (
    OrganizationFeatureSettings,
    OrganizationFeatureSettingsTypedDict,
)
from .organizationprofilesettings import (
    OrganizationProfileSettings,
    OrganizationProfileSettingsTypedDict,
)
from .organizationsociallink import (
    OrganizationSocialLink,
    OrganizationSocialLinkTypedDict,
)
from .organizationsubscriptionsettings import (
    OrganizationSubscriptionSettings,
    OrganizationSubscriptionSettingsTypedDict,
)
from polar_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OrganizationUpdateTypedDict(TypedDict):
    name: NotRequired[Nullable[str]]
    avatar_url: NotRequired[Nullable[str]]
    email: NotRequired[Nullable[str]]
    r"""Public support email."""
    website: NotRequired[Nullable[str]]
    r"""Official website of the organization."""
    socials: NotRequired[Nullable[List[OrganizationSocialLinkTypedDict]]]
    r"""Links to social profiles."""
    details: NotRequired[Nullable[OrganizationDetailsTypedDict]]
    r"""Additional, private, business details Polar needs about active organizations for compliance (KYC)."""
    feature_settings: NotRequired[Nullable[OrganizationFeatureSettingsTypedDict]]
    subscription_settings: NotRequired[
        Nullable[OrganizationSubscriptionSettingsTypedDict]
    ]
    default_upfront_split_to_contributors: NotRequired[Nullable[int]]
    pledge_badge_show_amount: NotRequired[bool]
    billing_email: NotRequired[Nullable[str]]
    default_badge_custom_content: NotRequired[Nullable[str]]
    pledge_minimum_amount: NotRequired[int]
    total_monthly_spending_limit: NotRequired[Nullable[int]]
    per_user_monthly_spending_limit: NotRequired[Nullable[int]]
    profile_settings: NotRequired[Nullable[OrganizationProfileSettingsTypedDict]]


class OrganizationUpdate(BaseModel):
    name: OptionalNullable[str] = UNSET

    avatar_url: OptionalNullable[str] = UNSET

    email: OptionalNullable[str] = UNSET
    r"""Public support email."""

    website: OptionalNullable[str] = UNSET
    r"""Official website of the organization."""

    socials: OptionalNullable[List[OrganizationSocialLink]] = UNSET
    r"""Links to social profiles."""

    details: OptionalNullable[OrganizationDetails] = UNSET
    r"""Additional, private, business details Polar needs about active organizations for compliance (KYC)."""

    feature_settings: OptionalNullable[OrganizationFeatureSettings] = UNSET

    subscription_settings: OptionalNullable[OrganizationSubscriptionSettings] = UNSET

    default_upfront_split_to_contributors: Annotated[
        OptionalNullable[int],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = UNSET

    pledge_badge_show_amount: Annotated[
        Optional[bool],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = False

    billing_email: Annotated[
        OptionalNullable[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = UNSET

    default_badge_custom_content: Annotated[
        OptionalNullable[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = UNSET

    pledge_minimum_amount: Annotated[
        Optional[int],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = 2000

    total_monthly_spending_limit: Annotated[
        OptionalNullable[int],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = UNSET

    per_user_monthly_spending_limit: Annotated[
        OptionalNullable[int],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = UNSET

    profile_settings: Annotated[
        OptionalNullable[OrganizationProfileSettings],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "avatar_url",
            "email",
            "website",
            "socials",
            "details",
            "feature_settings",
            "subscription_settings",
            "default_upfront_split_to_contributors",
            "pledge_badge_show_amount",
            "billing_email",
            "default_badge_custom_content",
            "pledge_minimum_amount",
            "total_monthly_spending_limit",
            "per_user_monthly_spending_limit",
            "profile_settings",
        ]
        nullable_fields = [
            "name",
            "avatar_url",
            "email",
            "website",
            "socials",
            "details",
            "feature_settings",
            "subscription_settings",
            "default_upfront_split_to_contributors",
            "billing_email",
            "default_badge_custom_content",
            "total_monthly_spending_limit",
            "per_user_monthly_spending_limit",
            "profile_settings",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
