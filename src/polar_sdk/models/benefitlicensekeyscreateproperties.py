"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .benefitlicensekeyactivationproperties import (
    BenefitLicenseKeyActivationProperties,
    BenefitLicenseKeyActivationPropertiesTypedDict,
)
from .benefitlicensekeyexpirationproperties import (
    BenefitLicenseKeyExpirationProperties,
    BenefitLicenseKeyExpirationPropertiesTypedDict,
)
from polar_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import NotRequired


class BenefitLicenseKeysCreatePropertiesTypedDict(TypedDict):
    prefix: NotRequired[Nullable[str]]
    expires: NotRequired[Nullable[BenefitLicenseKeyExpirationPropertiesTypedDict]]
    activations: NotRequired[Nullable[BenefitLicenseKeyActivationPropertiesTypedDict]]
    limit_usage: NotRequired[Nullable[int]]


class BenefitLicenseKeysCreateProperties(BaseModel):
    prefix: OptionalNullable[str] = UNSET

    expires: OptionalNullable[BenefitLicenseKeyExpirationProperties] = UNSET

    activations: OptionalNullable[BenefitLicenseKeyActivationProperties] = UNSET

    limit_usage: OptionalNullable[int] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["prefix", "expires", "activations", "limit_usage"]
        nullable_fields = ["prefix", "expires", "activations", "limit_usage"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
