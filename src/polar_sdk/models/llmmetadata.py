"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from polar_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class LLMMetadataTypedDict(TypedDict):
    vendor: str
    r"""The vendor of the event."""
    model: str
    r"""The model used for the event."""
    input_tokens: int
    r"""The number of LLM input tokens used for the event."""
    output_tokens: int
    r"""The number of LLM output tokens used for the event."""
    total_tokens: int
    r"""The total number of LLM tokens used for the event."""
    prompt: NotRequired[Nullable[str]]
    r"""The LLM prompt used for the event."""
    response: NotRequired[Nullable[str]]
    r"""The LLM response used for the event."""
    cached_input_tokens: NotRequired[int]
    r"""The number of LLM cached tokens that were used for the event."""


class LLMMetadata(BaseModel):
    vendor: str
    r"""The vendor of the event."""

    model: str
    r"""The model used for the event."""

    input_tokens: int
    r"""The number of LLM input tokens used for the event."""

    output_tokens: int
    r"""The number of LLM output tokens used for the event."""

    total_tokens: int
    r"""The total number of LLM tokens used for the event."""

    prompt: OptionalNullable[str] = UNSET
    r"""The LLM prompt used for the event."""

    response: OptionalNullable[str] = UNSET
    r"""The LLM response used for the event."""

    cached_input_tokens: Optional[int] = None
    r"""The number of LLM cached tokens that were used for the event."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["prompt", "response", "cached_input_tokens"]
        nullable_fields = ["prompt", "response"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
