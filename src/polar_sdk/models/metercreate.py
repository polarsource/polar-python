"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .countaggregation import CountAggregation, CountAggregationTypedDict
from .filter_ import Filter, FilterTypedDict
from .propertyaggregation import PropertyAggregation, PropertyAggregationTypedDict
from polar_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from polar_sdk.utils import get_discriminator
import pydantic
from pydantic import Discriminator, Tag, model_serializer
from typing import Dict, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


MeterCreateMetadataTypedDict = TypeAliasType(
    "MeterCreateMetadataTypedDict", Union[str, int, bool]
)


MeterCreateMetadata = TypeAliasType("MeterCreateMetadata", Union[str, int, bool])


MeterCreateAggregationTypedDict = TypeAliasType(
    "MeterCreateAggregationTypedDict",
    Union[CountAggregationTypedDict, PropertyAggregationTypedDict],
)
r"""The aggregation to apply on the filtered events to calculate the meter."""


MeterCreateAggregation = Annotated[
    Union[
        Annotated[PropertyAggregation, Tag("avg")],
        Annotated[CountAggregation, Tag("count")],
        Annotated[PropertyAggregation, Tag("max")],
        Annotated[PropertyAggregation, Tag("min")],
        Annotated[PropertyAggregation, Tag("sum")],
    ],
    Discriminator(lambda m: get_discriminator(m, "func", "func")),
]
r"""The aggregation to apply on the filtered events to calculate the meter."""


class MeterCreateTypedDict(TypedDict):
    name: str
    r"""The name of the meter. Will be shown on customer's invoices and usage."""
    filter_: FilterTypedDict
    aggregation: MeterCreateAggregationTypedDict
    r"""The aggregation to apply on the filtered events to calculate the meter."""
    metadata: NotRequired[Dict[str, MeterCreateMetadataTypedDict]]
    r"""Key-value object allowing you to store additional information.

    The key must be a string with a maximum length of **40 characters**.
    The value must be either:

    * A string with a maximum length of **500 characters**
    * An integer
    * A boolean

    You can store up to **50 key-value pairs**.
    """
    organization_id: NotRequired[Nullable[str]]
    r"""The ID of the organization owning the meter. **Required unless you use an organization token.**"""


class MeterCreate(BaseModel):
    name: str
    r"""The name of the meter. Will be shown on customer's invoices and usage."""

    filter_: Annotated[Filter, pydantic.Field(alias="filter")]

    aggregation: MeterCreateAggregation
    r"""The aggregation to apply on the filtered events to calculate the meter."""

    metadata: Optional[Dict[str, MeterCreateMetadata]] = None
    r"""Key-value object allowing you to store additional information.

    The key must be a string with a maximum length of **40 characters**.
    The value must be either:

    * A string with a maximum length of **500 characters**
    * An integer
    * A boolean

    You can store up to **50 key-value pairs**.
    """

    organization_id: OptionalNullable[str] = UNSET
    r"""The ID of the organization owning the meter. **Required unless you use an organization token.**"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["metadata", "organization_id"]
        nullable_fields = ["organization_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
