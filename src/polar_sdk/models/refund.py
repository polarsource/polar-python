"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .refundreason import RefundReason
from .refundstatus import RefundStatus
from datetime import datetime
from polar_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Dict, Union
from typing_extensions import TypeAliasType, TypedDict


RefundMetadataTypedDict = TypeAliasType(
    "RefundMetadataTypedDict", Union[str, int, bool]
)


RefundMetadata = TypeAliasType("RefundMetadata", Union[str, int, bool])


class RefundTypedDict(TypedDict):
    created_at: datetime
    r"""Creation timestamp of the object."""
    modified_at: Nullable[datetime]
    r"""Last modification timestamp of the object."""
    id: str
    r"""The ID of the object."""
    metadata: Dict[str, RefundMetadataTypedDict]
    status: RefundStatus
    reason: RefundReason
    amount: int
    tax_amount: int
    currency: str
    organization_id: str
    order_id: str
    subscription_id: Nullable[str]
    customer_id: str
    revoke_benefits: bool


class Refund(BaseModel):
    created_at: datetime
    r"""Creation timestamp of the object."""

    modified_at: Nullable[datetime]
    r"""Last modification timestamp of the object."""

    id: str
    r"""The ID of the object."""

    metadata: Dict[str, RefundMetadata]

    status: RefundStatus

    reason: RefundReason

    amount: int

    tax_amount: int

    currency: str

    organization_id: str

    order_id: str

    subscription_id: Nullable[str]

    customer_id: str

    revoke_benefits: bool

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["modified_at", "subscription_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
