"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .licensekeystatus import LicenseKeyStatus
from datetime import datetime
from polar_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class LicenseKeyUpdateTypedDict(TypedDict):
    status: NotRequired[Nullable[LicenseKeyStatus]]
    usage: NotRequired[int]
    limit_activations: NotRequired[Nullable[int]]
    limit_usage: NotRequired[Nullable[int]]
    expires_at: NotRequired[Nullable[datetime]]


class LicenseKeyUpdate(BaseModel):
    status: OptionalNullable[LicenseKeyStatus] = UNSET

    usage: Optional[int] = 0

    limit_activations: OptionalNullable[int] = UNSET

    limit_usage: OptionalNullable[int] = UNSET

    expires_at: OptionalNullable[datetime] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "status",
            "usage",
            "limit_activations",
            "limit_usage",
            "expires_at",
        ]
        nullable_fields = ["status", "limit_activations", "limit_usage", "expires_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
