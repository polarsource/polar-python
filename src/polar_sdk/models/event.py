"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .customer import Customer, CustomerTypedDict
from .eventsource import EventSource
from datetime import datetime
from polar_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Dict, Union
from typing_extensions import TypeAliasType, TypedDict


EventMetadataTypedDict = TypeAliasType("EventMetadataTypedDict", Union[str, int, bool])


EventMetadata = TypeAliasType("EventMetadata", Union[str, int, bool])


class EventTypedDict(TypedDict):
    metadata: Dict[str, EventMetadataTypedDict]
    id: str
    r"""The ID of the object."""
    timestamp: datetime
    r"""The timestamp of the event."""
    name: str
    r"""The name of the event."""
    source: EventSource
    organization_id: str
    r"""The ID of the organization owning the event."""
    customer_id: Nullable[str]
    r"""ID of the customer in your Polar organization associated with the event."""
    customer: Nullable[CustomerTypedDict]
    r"""The customer associated with the event."""
    external_customer_id: Nullable[str]
    r"""ID of the customer in your system associated with the event."""


class Event(BaseModel):
    metadata: Dict[str, EventMetadata]

    id: str
    r"""The ID of the object."""

    timestamp: datetime
    r"""The timestamp of the event."""

    name: str
    r"""The name of the event."""

    source: EventSource

    organization_id: str
    r"""The ID of the organization owning the event."""

    customer_id: Nullable[str]
    r"""ID of the customer in your Polar organization associated with the event."""

    customer: Nullable[Customer]
    r"""The customer associated with the event."""

    external_customer_id: Nullable[str]
    r"""ID of the customer in your system associated with the event."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["customer_id", "customer", "external_customer_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
