"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from polar_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Final, TypedDict
from typing_extensions import Annotated


class ProductPriceOneTimeCustomAmountType(str, Enum):
    CUSTOM = "custom"


class ProductPriceOneTimeCustomType(str, Enum):
    r"""The type of the price."""

    ONE_TIME = "one_time"


class ProductPriceOneTimeCustomTypedDict(TypedDict):
    r"""A pay-what-you-want price for a one-time product."""

    created_at: datetime
    r"""Creation timestamp of the object."""
    modified_at: Nullable[datetime]
    r"""Last modification timestamp of the object."""
    id: str
    r"""The ID of the price."""
    price_currency: str
    r"""The currency."""
    is_archived: bool
    r"""Whether the price is archived and no longer available."""
    minimum_amount: Nullable[int]
    r"""The minimum amount the customer can pay."""
    maximum_amount: Nullable[int]
    r"""The maximum amount the customer can pay."""
    preset_amount: Nullable[int]
    r"""The initial amount shown to the customer."""


class ProductPriceOneTimeCustom(BaseModel):
    r"""A pay-what-you-want price for a one-time product."""

    created_at: datetime
    r"""Creation timestamp of the object."""

    modified_at: Nullable[datetime]
    r"""Last modification timestamp of the object."""

    id: str
    r"""The ID of the price."""

    price_currency: str
    r"""The currency."""

    is_archived: bool
    r"""Whether the price is archived and no longer available."""

    minimum_amount: Nullable[int]
    r"""The minimum amount the customer can pay."""

    maximum_amount: Nullable[int]
    r"""The maximum amount the customer can pay."""

    preset_amount: Nullable[int]
    r"""The initial amount shown to the customer."""

    # fmt: off
    AMOUNT_TYPE: Annotated[Final[ProductPriceOneTimeCustomAmountType], pydantic.Field(alias="amount_type")] = ProductPriceOneTimeCustomAmountType.CUSTOM # type: ignore
    # fmt: on

    # fmt: off
    TYPE: Annotated[Final[ProductPriceOneTimeCustomType], pydantic.Field(alias="type")] = ProductPriceOneTimeCustomType.ONE_TIME # type: ignore
    # fmt: on
    r"""The type of the price."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "modified_at",
            "minimum_amount",
            "maximum_amount",
            "preset_amount",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
