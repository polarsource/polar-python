"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .subscriptionrecurringinterval import SubscriptionRecurringInterval
from enum import Enum
from polar_sdk.types import BaseModel
import pydantic
from typing import Final, TypedDict
from typing_extensions import Annotated


class ProductPriceRecurringFreeCreateType(str, Enum):
    RECURRING = "recurring"


class ProductPriceRecurringFreeCreateAmountType(str, Enum):
    FREE = "free"


class ProductPriceRecurringFreeCreateTypedDict(TypedDict):
    r"""Schema to create a free recurring product price, i.e. a subscription."""

    recurring_interval: SubscriptionRecurringInterval
    r"""The recurring interval of the price."""
    type: ProductPriceRecurringFreeCreateType
    amount_type: ProductPriceRecurringFreeCreateAmountType


class ProductPriceRecurringFreeCreate(BaseModel):
    r"""Schema to create a free recurring product price, i.e. a subscription."""

    recurring_interval: SubscriptionRecurringInterval
    r"""The recurring interval of the price."""

    # fmt: off
    TYPE: Annotated[Final[ProductPriceRecurringFreeCreateType], pydantic.Field(alias="type")] = ProductPriceRecurringFreeCreateType.RECURRING # type: ignore
    # fmt: on

    # fmt: off
    AMOUNT_TYPE: Annotated[Final[ProductPriceRecurringFreeCreateAmountType], pydantic.Field(alias="amount_type")] = ProductPriceRecurringFreeCreateAmountType.FREE # type: ignore
    # fmt: on
